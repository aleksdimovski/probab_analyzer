### Starting build.
# Target: banal/ml_float.c, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), c, compile, extension:c, file:banal/ml_float.c, quiet }
ocamlfind ocamlc -package zarith -package oUnit -package gmp -package apron -package bddapron -c banal/ml_float.c # cached
# Target: banal/ml_float.o, tags: {  }
mv ml_float.o banal/ml_float.o # cached
# Target: main/Main.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:main/Main.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules main/Main.ml > main/Main.ml.depends # cached
# Target: frontend/AbstractSyntax.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:frontend/AbstractSyntax.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules frontend/AbstractSyntax.ml > frontend/AbstractSyntax.ml.depends # cached
# Target: frontend/IntermediateSyntax.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:frontend/IntermediateSyntax.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules frontend/IntermediateSyntax.ml > frontend/IntermediateSyntax.ml.depends # cached
# Target: frontend/IntermediateSyntax.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:frontend/IntermediateSyntax.cmo, file:frontend/IntermediateSyntax.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal -o frontend/IntermediateSyntax.cmo frontend/IntermediateSyntax.ml # cached
# Target: frontend/AbstractSyntax.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:frontend/AbstractSyntax.cmo, file:frontend/AbstractSyntax.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal -o frontend/AbstractSyntax.cmo frontend/AbstractSyntax.ml # cached
# Target: main/BDDAnalysisIterator.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:main/BDDAnalysisIterator.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules main/BDDAnalysisIterator.ml > main/BDDAnalysisIterator.ml.depends # cached
# Target: domains/BDDDomain.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:domains/BDDDomain.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules domains/BDDDomain.ml > domains/BDDDomain.ml.depends # cached
# Target: domains/BDDDomain.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:domains/BDDDomain.cmo, file:domains/BDDDomain.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/BDDDomain.cmo domains/BDDDomain.ml # cached
# Target: utils/InvMap.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:utils/InvMap.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules utils/InvMap.ml > utils/InvMap.ml.depends # cached
# Target: utils/InvMap.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:utils/InvMap.cmo, file:utils/InvMap.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I utils -I domains -I frontend -I main -I banal -o utils/InvMap.cmo utils/InvMap.ml # cached
# Target: main/Iterator.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:main/Iterator.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules main/Iterator.ml > main/Iterator.ml.depends # cached
# Target: main/Iterator.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:main/Iterator.cmo, file:main/Iterator.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I main -I domains -I frontend -I utils -I banal -o main/Iterator.cmo main/Iterator.ml # cached
# Target: frontend/ItoA.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:frontend/ItoA.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules frontend/ItoA.ml > frontend/ItoA.ml.depends # cached
# Target: frontend/ItoA.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:frontend/ItoA.cmo, file:frontend/ItoA.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal -o frontend/ItoA.cmo frontend/ItoA.ml # cached
# Target: domains/Partition.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:domains/Partition.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules domains/Partition.ml > domains/Partition.ml.depends # cached
# Target: utils/Constraints.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:utils/Constraints.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules utils/Constraints.ml > utils/Constraints.ml.depends # cached
# Target: utils/Constraints.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:utils/Constraints.cmo, file:utils/Constraints.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I utils -I domains -I frontend -I main -I banal -o utils/Constraints.cmo utils/Constraints.ml # cached
# Target: domains/Partition.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:domains/Partition.cmo, file:domains/Partition.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/Partition.cmo domains/Partition.ml # cached
# Target: main/BDDAnalysisIterator.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:main/BDDAnalysisIterator.cmo, file:main/BDDAnalysisIterator.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I main -I domains -I frontend -I utils -I banal -o main/BDDAnalysisIterator.cmo main/BDDAnalysisIterator.ml # cached
# Target: frontend/Lexer.mll, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:mll, file:frontend/Lexer.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q frontend/Lexer.mll # cached
# Target: frontend/Lexer.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:frontend/Lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules frontend/Lexer.ml > frontend/Lexer.ml.depends # cached
# Target: frontend/Parser.mly.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:mly, file:frontend/Parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' frontend/Parser.mly > frontend/Parser.mly.depends # cached
# Target: frontend/Parser.mly, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:ml, extension:mly, file:frontend/Parser.ml, file:frontend/Parser.mly, infer, menhir, ocaml, parser, quiet }
menhir --ocamlc 'ocamlfind ocamlc -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal' --infer frontend/Parser.mly # cached
# Target: frontend/Parser.mli.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:mli, file:frontend/Parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules frontend/Parser.mli > frontend/Parser.mli.depends # cached
# Target: frontend/Parser.cmi, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:mli, file:frontend/Parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal -o frontend/Parser.cmi frontend/Parser.mli # cached
# Target: frontend/Lexer.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:frontend/Lexer.cmo, file:frontend/Lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal -o frontend/Lexer.cmo frontend/Lexer.ml # cached
# Target: domains/MakeBDDDomain.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:domains/MakeBDDDomain.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules domains/MakeBDDDomain.ml > domains/MakeBDDDomain.ml.depends # cached
# Target: domains/MakeBDDDomain.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:domains/MakeBDDDomain.cmo, file:domains/MakeBDDDomain.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/MakeBDDDomain.cmo domains/MakeBDDDomain.ml # cached
# Target: domains/Maketuple.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:domains/Maketuple.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules domains/Maketuple.ml > domains/Maketuple.ml.depends # cached
# Target: domains/Numerical.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:domains/Numerical.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules domains/Numerical.ml > domains/Numerical.ml.depends # cached
# Target: banal/banal_apron_domain.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_apron_domain.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_apron_domain.ml > banal/banal_apron_domain.ml.depends # cached
# Target: banal/banal_abstract_syntax.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_abstract_syntax.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_abstract_syntax.ml > banal/banal_abstract_syntax.ml.depends # cached
# Target: banal/banal_datatypes.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_datatypes.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_datatypes.ml > banal/banal_datatypes.ml.depends # cached
# Target: utils/mapext.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:utils/mapext.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules utils/mapext.ml > utils/mapext.ml.depends # cached
# Target: utils/mapext.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:utils/mapext.cmo, file:utils/mapext.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I utils -I domains -I frontend -I main -I banal -o utils/mapext.cmo utils/mapext.ml # cached
# Target: banal/banal_datatypes.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_datatypes.cmo, file:banal/banal_datatypes.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_datatypes.cmo banal/banal_datatypes.ml # cached
# Target: banal/banal_abstract_syntax.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_abstract_syntax.cmo, file:banal/banal_abstract_syntax.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_abstract_syntax.cmo banal/banal_abstract_syntax.ml # cached
# Target: banal/banal_domain.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_domain.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_domain.ml > banal/banal_domain.ml.depends # cached
# Target: banal/banal_typed_syntax.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_typed_syntax.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_typed_syntax.ml > banal/banal_typed_syntax.ml.depends # cached
# Target: banal/banal_float.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_float.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_float.ml > banal/banal_float.ml.depends # cached
# Target: banal/banal_int.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_int.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_int.ml > banal/banal_int.ml.depends # cached
# Target: banal/banal_int.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_int.cmo, file:banal/banal_int.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_int.cmo banal/banal_int.ml # cached
# Target: banal/banal_float.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_float.cmo, file:banal/banal_float.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_float.cmo banal/banal_float.ml # cached
# Target: banal/banal_intinf.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_intinf.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_intinf.ml > banal/banal_intinf.ml.depends # cached
# Target: banal/banal_intinf.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_intinf.cmo, file:banal/banal_intinf.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_intinf.cmo banal/banal_intinf.ml # cached
# Target: banal/banal_typed_syntax.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_typed_syntax.cmo, file:banal/banal_typed_syntax.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_typed_syntax.cmo banal/banal_typed_syntax.ml # cached
# Target: banal/banal_domain.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_domain.cmo, file:banal/banal_domain.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_domain.cmo banal/banal_domain.ml # cached
# Target: banal/banal_itv_rat.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_itv_rat.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_itv_rat.ml > banal/banal_itv_rat.ml.depends # cached
# Target: banal/banal_rat.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_rat.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_rat.ml > banal/banal_rat.ml.depends # cached
# Target: banal/banal_rat.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_rat.cmo, file:banal/banal_rat.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_rat.cmo banal/banal_rat.ml # cached
# Target: banal/banal_itv_rat.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_itv_rat.cmo, file:banal/banal_itv_rat.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_itv_rat.cmo banal/banal_itv_rat.ml # cached
# Target: banal/banal_linearization.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_linearization.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_linearization.ml > banal/banal_linearization.ml.depends # cached
# Target: banal/banal_affine.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_affine.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_affine.ml > banal/banal_affine.ml.depends # cached
# Target: banal/banal_itv_float.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_itv_float.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_itv_float.ml > banal/banal_itv_float.ml.depends # cached
# Target: banal/banal_itv_float.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_itv_float.cmo, file:banal/banal_itv_float.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_itv_float.cmo banal/banal_itv_float.ml # cached
# Target: banal/banal_itv_int.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_itv_int.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_itv_int.ml > banal/banal_itv_int.ml.depends # cached
# Target: banal/banal_itv_int.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_itv_int.cmo, file:banal/banal_itv_int.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_itv_int.cmo banal/banal_itv_int.ml # cached
# Target: banal/banal_mathtypes.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_mathtypes.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_mathtypes.ml > banal/banal_mathtypes.ml.depends # cached
# Target: banal/banal_mathtypes.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_mathtypes.cmo, file:banal/banal_mathtypes.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_mathtypes.cmo banal/banal_mathtypes.ml # cached
# Target: banal/banal_affine.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_affine.cmo, file:banal/banal_affine.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_affine.cmo banal/banal_affine.ml # cached
# Target: banal/banal_semantics.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/banal_semantics.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/banal_semantics.ml > banal/banal_semantics.ml.depends # cached
# Target: banal/banal_semantics.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_semantics.cmo, file:banal/banal_semantics.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_semantics.cmo banal/banal_semantics.ml # cached
# Target: banal/banal_linearization.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_linearization.cmo, file:banal/banal_linearization.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_linearization.cmo banal/banal_linearization.ml # cached
# Target: banal/banal_apron_domain.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/banal_apron_domain.cmo, file:banal/banal_apron_domain.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_apron_domain.cmo banal/banal_apron_domain.ml # cached
# Target: banal/function_banal_converter.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:banal/function_banal_converter.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules banal/function_banal_converter.ml > banal/function_banal_converter.ml.depends # cached
# Target: banal/function_banal_converter.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:banal/function_banal_converter.cmo, file:banal/function_banal_converter.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/function_banal_converter.cmo banal/function_banal_converter.ml # cached
# Target: domains/Numerical.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:domains/Numerical.cmo, file:domains/Numerical.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/Numerical.cmo domains/Numerical.ml # cached
# Target: domains/Tuple.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:domains/Tuple.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules domains/Tuple.ml > domains/Tuple.ml.depends # cached
# Target: domains/Tuple.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:domains/Tuple.cmo, file:domains/Tuple.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/Tuple.cmo domains/Tuple.ml # cached
# Target: domains/Maketuple.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:domains/Maketuple.cmo, file:domains/Maketuple.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/Maketuple.cmo domains/Maketuple.ml # cached
# Target: main/SingleAnalysisIterator.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:main/SingleAnalysisIterator.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules main/SingleAnalysisIterator.ml > main/SingleAnalysisIterator.ml.depends # cached
# Target: main/SingleAnalysisIterator.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:main/SingleAnalysisIterator.cmo, file:main/SingleAnalysisIterator.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I main -I domains -I frontend -I utils -I banal -o main/SingleAnalysisIterator.cmo main/SingleAnalysisIterator.ml # cached
# Target: main/TupleAnalysisIterator.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:main/TupleAnalysisIterator.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules main/TupleAnalysisIterator.ml > main/TupleAnalysisIterator.ml.depends # cached
# Target: main/TupleAnalysisIterator.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:main/TupleAnalysisIterator.cmo, file:main/TupleAnalysisIterator.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I main -I domains -I frontend -I utils -I banal -o main/TupleAnalysisIterator.cmo main/TupleAnalysisIterator.ml # cached
# Target: main/Main.cmo, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), byte, compile, extension:cmo, extension:ml, file:main/Main.cmo, file:main/Main.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I main -I domains -I frontend -I utils -I banal -o main/Main.cmo main/Main.ml # cached
# Target: frontend/IntermediateSyntax.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:frontend/IntermediateSyntax.cmx, file:frontend/IntermediateSyntax.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal -o frontend/IntermediateSyntax.cmx frontend/IntermediateSyntax.ml # cached
# Target: frontend/AbstractSyntax.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:frontend/AbstractSyntax.cmx, file:frontend/AbstractSyntax.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal -o frontend/AbstractSyntax.cmx frontend/AbstractSyntax.ml # cached
# Target: domains/BDDDomain.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:domains/BDDDomain.cmx, file:domains/BDDDomain.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/BDDDomain.cmx domains/BDDDomain.ml # cached
# Target: utils/InvMap.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:utils/InvMap.cmx, file:utils/InvMap.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I utils -I domains -I frontend -I main -I banal -o utils/InvMap.cmx utils/InvMap.ml # cached
# Target: main/Iterator.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:main/Iterator.cmx, file:main/Iterator.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I main -I domains -I frontend -I utils -I banal -o main/Iterator.cmx main/Iterator.ml # cached
# Target: frontend/ItoA.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:frontend/ItoA.cmx, file:frontend/ItoA.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal -o frontend/ItoA.cmx frontend/ItoA.ml # cached
# Target: utils/Constraints.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:utils/Constraints.cmx, file:utils/Constraints.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I utils -I domains -I frontend -I main -I banal -o utils/Constraints.cmx utils/Constraints.ml # cached
# Target: domains/Partition.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:domains/Partition.cmx, file:domains/Partition.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/Partition.cmx domains/Partition.ml # cached
# Target: main/BDDAnalysisIterator.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:main/BDDAnalysisIterator.cmx, file:main/BDDAnalysisIterator.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I main -I domains -I frontend -I utils -I banal -o main/BDDAnalysisIterator.cmx main/BDDAnalysisIterator.ml # cached
# Target: frontend/Parser.ml.depends, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), extension:ml, file:frontend/Parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package zarith -package oUnit -package gmp -package apron -package bddapron -modules frontend/Parser.ml > frontend/Parser.ml.depends # cached
# Target: frontend/Parser.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:frontend/Parser.cmx, file:frontend/Parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal -o frontend/Parser.cmx frontend/Parser.ml # cached
# Target: frontend/Lexer.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:frontend/Lexer.cmx, file:frontend/Lexer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I frontend -I domains -I main -I utils -I banal -o frontend/Lexer.cmx frontend/Lexer.ml # cached
# Target: domains/MakeBDDDomain.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:domains/MakeBDDDomain.cmx, file:domains/MakeBDDDomain.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/MakeBDDDomain.cmx domains/MakeBDDDomain.ml # cached
# Target: utils/mapext.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:utils/mapext.cmx, file:utils/mapext.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I utils -I domains -I frontend -I main -I banal -o utils/mapext.cmx utils/mapext.ml # cached
# Target: banal/banal_datatypes.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_datatypes.cmx, file:banal/banal_datatypes.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_datatypes.cmx banal/banal_datatypes.ml # cached
# Target: banal/banal_abstract_syntax.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_abstract_syntax.cmx, file:banal/banal_abstract_syntax.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_abstract_syntax.cmx banal/banal_abstract_syntax.ml # cached
# Target: banal/banal_int.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_int.cmx, file:banal/banal_int.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_int.cmx banal/banal_int.ml # cached
# Target: banal/banal_float.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_float.cmx, file:banal/banal_float.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_float.cmx banal/banal_float.ml # cached
# Target: banal/banal_intinf.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_intinf.cmx, file:banal/banal_intinf.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_intinf.cmx banal/banal_intinf.ml # cached
# Target: banal/banal_typed_syntax.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_typed_syntax.cmx, file:banal/banal_typed_syntax.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_typed_syntax.cmx banal/banal_typed_syntax.ml # cached
# Target: banal/banal_domain.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_domain.cmx, file:banal/banal_domain.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_domain.cmx banal/banal_domain.ml # cached
# Target: banal/banal_rat.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_rat.cmx, file:banal/banal_rat.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_rat.cmx banal/banal_rat.ml # cached
# Target: banal/banal_itv_rat.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_itv_rat.cmx, file:banal/banal_itv_rat.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_itv_rat.cmx banal/banal_itv_rat.ml # cached
# Target: banal/banal_itv_float.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_itv_float.cmx, file:banal/banal_itv_float.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_itv_float.cmx banal/banal_itv_float.ml # cached
# Target: banal/banal_itv_int.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_itv_int.cmx, file:banal/banal_itv_int.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_itv_int.cmx banal/banal_itv_int.ml # cached
# Target: banal/banal_mathtypes.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_mathtypes.cmx, file:banal/banal_mathtypes.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_mathtypes.cmx banal/banal_mathtypes.ml # cached
# Target: banal/banal_affine.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_affine.cmx, file:banal/banal_affine.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_affine.cmx banal/banal_affine.ml # cached
# Target: banal/banal_semantics.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_semantics.cmx, file:banal/banal_semantics.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_semantics.cmx banal/banal_semantics.ml # cached
# Target: banal/banal_linearization.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_linearization.cmx, file:banal/banal_linearization.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_linearization.cmx banal/banal_linearization.ml # cached
# Target: banal/banal_apron_domain.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/banal_apron_domain.cmx, file:banal/banal_apron_domain.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/banal_apron_domain.cmx banal/banal_apron_domain.ml # cached
# Target: banal/function_banal_converter.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:banal/function_banal_converter.cmx, file:banal/function_banal_converter.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I banal -I domains -I frontend -I main -I utils -o banal/function_banal_converter.cmx banal/function_banal_converter.ml # cached
# Target: domains/Numerical.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:domains/Numerical.cmx, file:domains/Numerical.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/Numerical.cmx domains/Numerical.ml # cached
# Target: domains/Tuple.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:domains/Tuple.cmx, file:domains/Tuple.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/Tuple.cmx domains/Tuple.ml # cached
# Target: domains/Maketuple.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:domains/Maketuple.cmx, file:domains/Maketuple.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I domains -I frontend -I main -I utils -I banal -o domains/Maketuple.cmx domains/Maketuple.ml # cached
# Target: main/SingleAnalysisIterator.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:main/SingleAnalysisIterator.cmx, file:main/SingleAnalysisIterator.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I main -I domains -I frontend -I utils -I banal -o main/SingleAnalysisIterator.cmx main/SingleAnalysisIterator.ml # cached
# Target: main/TupleAnalysisIterator.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:main/TupleAnalysisIterator.cmx, file:main/TupleAnalysisIterator.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I main -I domains -I frontend -I utils -I banal -o main/TupleAnalysisIterator.cmx main/TupleAnalysisIterator.ml # cached
# Target: main/Main.cmx, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), compile, extension:cmx, extension:ml, file:main/Main.cmx, file:main/Main.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package zarith -package oUnit -package gmp -package apron -package bddapron -I main -I domains -I frontend -I utils -I banal -o main/Main.cmx main/Main.ml # cached
# Target: main/Main.native, tags: { package(apron), package(bddapron), package(gmp), package(oUnit), package(zarith), dont_link_with, extension:native, file:main/Main.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt banal/ml_float.o boxMPQ.cmxa octD.cmxa polkaMPQ.cmxa str.cmxa zarith.cmxa bddapron.cmxa -linkpkg -package zarith -package oUnit -package gmp -package apron -package bddapron -I utils -I banal -I frontend -I domains -I main utils/mapext.cmx banal/banal_datatypes.cmx banal/banal_abstract_syntax.cmx banal/banal_int.cmx banal/banal_float.cmx banal/banal_intinf.cmx banal/banal_itv_float.cmx banal/banal_itv_int.cmx banal/banal_rat.cmx banal/banal_itv_rat.cmx banal/banal_mathtypes.cmx banal/banal_affine.cmx banal/banal_typed_syntax.cmx banal/banal_domain.cmx banal/banal_semantics.cmx banal/banal_linearization.cmx banal/banal_apron_domain.cmx frontend/IntermediateSyntax.cmx frontend/AbstractSyntax.cmx banal/function_banal_converter.cmx domains/BDDDomain.cmx utils/Constraints.cmx domains/MakeBDDDomain.cmx domains/Partition.cmx domains/Numerical.cmx domains/Tuple.cmx domains/Maketuple.cmx frontend/ItoA.cmx frontend/Parser.cmx frontend/Lexer.cmx main/Iterator.cmx utils/InvMap.cmx main/BDDAnalysisIterator.cmx main/SingleAnalysisIterator.cmx main/TupleAnalysisIterator.cmx main/Main.cmx -o main/Main.native # cached
# Compilation successful.
